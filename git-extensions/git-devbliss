#!/bin/bash

set -eu

# normal branches
branches=(feature bug refactor research)

function help {
    echo 'Usage:'
    echo '    git devbliss ['`echo "${branches[@]}" | sed 's/ / \| /g'`'] DESCRIPTION'
    echo '    git devbliss hotfix VERSION DESCRIPTION'
    echo '    git devbliss finish'
    echo '    git devbliss release VERSION'
    echo '    git devbliss status'
    echo '    git devbliss delete [-f]'
    echo '    git devbliss issue [TITLE]'
    echo
    echo 'Options:'
    echo '    '`echo "${branches[@]}" | sed 's/ /, /g'`
    echo '                  Branch from master (normal branches)'
    echo '    hotfix        Branch from a tag (fix a bug in an already released version)'
    echo '    finish        Open a pull request for the current branch'
    echo '    release       Create a new tag, commit and push'
    echo '    status        List branches, pull requests, and issues'
    echo '    issue         Quickly post an issue to GitHub'
    echo '    delete        Delete the current branch on github.com'
    echo '    -v --version  Print version number of git-devbliss'
}

function version {
    changelog="/usr/share/doc/git-devbliss/CHANGES.md"
    local local_version=$(perl -ne '/^#+ +\d\.\d\.\d([^\.].*)?$/ && s/^#+ +(\d\.\d\.\d)/$1/ && print && exit' $changelog)
    echo $local_version
}

function update_check {
    local latest_remote=$(github-devbliss tags devbliss/workflow | tail -n1)
    if [ -z $latest_remote ]; then
        return 0
    fi
    local local_version=$(version)
    if [[ $latest_remote > $local_version ]]; then
        echo
        echo "New version ($latest_remote) of git devbliss available. Your version is $local_version"
        echo "Please go to your local copy of git devbliss (workflow) and enter './update'"
        echo
    fi

}

function is_repository_clean {
    if [ "`git status --short --untracked-files=no | wc -l | sed -e 's/ //g'`" != "0" ]; then
        return 1
    fi
    return 0
}

function check_repo_toplevel {
    # check if pwd is repository root in order to run makefile hooks properly
    if [[ $(git rev-parse --show-toplevel) != $(pwd) ]]; then
        echo "You need to run this command from the toplevel of the working tree." > /dev/stderr
        exit 2
    fi
}

function makefile_hooks {
    # if you use this function always run the check_repo_toplevel beforehand
    # otherwise the makefile will not be found.
    #
    # reasonable targets are: changelog, version, test (see: README.md)
    if [ ! -f Makefile ]; then
        echo "Warning: No Makefile found. All make hooks have been skipped." >> /dev/stderr
        return
    fi
    make $1 || echo "Warning: Makefile has no target named \"$1\"." >> /dev/stderr
}

function is_branch_command {
    local e
    for e in "${branches[@]}"; do [[ "$e" == "$1" ]] && return 0; done
    return 1
}

function hotfix {
    if git tag | grep $1; then
        git fetch origin
        git checkout --quiet $1
        git checkout --quiet -b hotfix/$2 &> /dev/null
        git checkout --quiet hotfix/$2 &> /dev/null
        git push --set-upstream origin hotfix/$2
    else
        echo "No such tag: $1" > /dev/stderr
        echo "Available tags:" > /dev/stderr
        git tag | awk '{print "    "$1}'
        exit 2
    fi
}

function branch {
    if [ $2 = "finish" ]; then
        echo "You are creating a branch \"$1/$2\", did you mean to type \"git devbliss finish\"?"
        echo "You can delete this branch with \"git devbliss delete\""
    fi
    git checkout --quiet master
    git pull --quiet origin master
    git checkout --quiet -b $1/$2 &> /dev/null
    git checkout --quiet $1/$2 &> /dev/null
    git push --set-upstream origin $1/$2
}

function release {
    check_repo_toplevel # neccessary to run makefile hooks
    if ! is_repository_clean; then
        echo "Error: Repository is not clean. Aborting." >> /dev/stderr
        exit 1
    fi
    echo "Have these changes been reviewed?"
    echo "[enter / ctrl+c to cancel]"
    read || exit 2
    local branch=`git rev-parse --abbrev-ref HEAD`
    if [[ "$branch" = 'master' ]]; then
        echo "Warning: You are currently on the master branch. Releasing from master branch is discouraged."
        echo "[enter / ctrl+c to cancel]"
        read || exit 2
    fi
    export DEVBLISS_VERSION="$1"
    makefile_hooks version
    if ! is_repository_clean; then
        git commit --quiet -am "Ran git devbliss version hook"
    fi
    makefile_hooks test
    git commit --quiet --allow-empty -m "Release: $1"
    git tag $1
    git push origin $1
    git push --tags origin $1
    if [[ "$branch" != 'master' ]]; then
        echo
        github-devbliss pull-request
    fi
    unset DEVBLISS_VERSION
}

function finish {
    check_repo_toplevel # neccessary to run makefile hooks
    local branch=`git rev-parse --abbrev-ref HEAD`
    if ! is_repository_clean; then
        echo "Error: Repository is not clean. Aborting." >> /dev/stderr
        exit 1
    fi
    if ! git branch --contains master | grep "$branch" > /dev/null; then
        echo "Error: Won't finish. Master is not merged into the current branch." > /dev/stderr
        echo "Please do 'git pull origin master', make sure all conflicts are merged and try again." > /dev/stderr
        exit 1
    fi
    export DEVBLISS_BRANCH_TYPE=`echo $branch | sed -e 's#\([^/]*\)/.*#\1#g'`
    makefile_hooks changelog
    if ! is_repository_clean; then
        git commit --quiet -am "Ran git devbliss changelog hook"
    fi
    git push origin $branch
    echo
    makefile_hooks test
    github-devbliss pull-request
    echo
    if [[ ! "$branch" =~ ^hotfix ]]; then
        git checkout master
        git pull
    fi
    show-pulls || true
}

function delete {
    local branch=`git rev-parse --abbrev-ref HEAD`
    if [[ "$branch" == "master" ]]; then
        echo "Won't delete master branch. Aborting." > /dev/stderr
        exit 2
    fi
    if [[ $1 != "-f" ]]; then
        echo -n "Really delete the remote branch? [y/N] "
        read a
        if [[ $a == "y" || $a == "Y" ]]; then
            git push --delete origin $branch
            echo 'To restore the remote branch, type'
            echo '    git push --set-upstream origin '$branch
            echo 'To delete your local branch, type'
            echo '    git checkout master && git branch -d '$branch
        else
            echo "Fatal: user interrupt" > /dev/stderr
            exit 2
        fi
    fi
}

# check whether the pwd is a git repository
git rev-parse --abbrev-ref HEAD > /dev/null || exit 1

# chech whether origin points to github.com
if ! git remote -v | grep "^origin.*github.com:.*(fetch)$" > /dev/null; then
    echo "Fatal: origin does not point to a github.com repository" > /dev/stderr
    exit 1
fi

if [[ $# == 3 ]]; then
    if [[ $1 == "hotfix" ]]; then
        hotfix $2 $3
    else
        help
    fi
elif [[ $# == 2 ]]; then
    if is_branch_command $1; then
        branch $1 $2
    elif [[ $1 == "release" ]]; then
        if echo $2 | grep -E '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            release "$2"
        else
            echo "Invalid version number" > /dev/stderr
            exit 2
        fi
    elif [[ $1 == "delete" ]]; then
        if [[ $2 == "-f" ]]; then
            delete "$2"
        else
            help
        fi
    elif [[ $1 == "issue" ]]; then
        github-devbliss issue "$2"
    else
        help
    fi
elif [[ $# == 1 ]]; then
    if [[ $1 == "finish" ]]; then
        finish
        update_check
    elif [[ $1 == "delete" ]]; then
        delete ""
    elif [[ $1 == "-v" ]]; then
        version
    elif [[ $1 == "--version" ]]; then
        version
    elif [[ $1 == "status" ]]; then
        github-devbliss status
        update_check
    elif [[ $1 == "issue" ]]; then
        github-devbliss issue
    else
        help
    fi
else
    help
fi

